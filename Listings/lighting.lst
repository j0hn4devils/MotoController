


ARM Macro Assembler    Page 1 Lighting.s


    1 00000000                 TTL              Lighting.s
    2 00000000         ;-----------------------------------------------------
    3 00000000         ;Lighting controls library NXP MKL46256XXXX
    4 00000000         ;Written by John DeBrino
    5 00000000         ;Sources referrenced: Roy Melton (CMPE-250 Professor)
    6 00000000         ;Revision Date: 12/26/2016
    7 00000000         
    8 00000000         ;-----------------------------------------------------
    9 00000000         ;    Assembler Directives and Includes
   10 00000000         
   11 00000000                 THUMB
   12 00000000                 GBLL             MIXED_ASM_C
   13 00000000 TRUE     
                       MIXED_ASM_C
                               SETL             {TRUE}
   16 00000000         
   17 00000000         ;-----------------------------------------------------
   18 00000000         ;        Equates
   19 00000000         
   20 00000000 40076006 
                       SPI_DL  EQU              0x40076006
   21 00000000 40076007 
                       SPI_DH  EQU              0x40076007
   22 00000000 40076000 
                       SPI_BASE
                               EQU              0x40076000
   23 00000000         ;The following equates are the hex codes for the colors
   24 00000000 00FFFFFF 
                       WHITE   EQU              0x00FFFFFF
   25 00000000 00FFC200 
                       AMBER   EQU              0x00FFC200
   26 00000000 00000000 
                       NOCOLOR EQU              0x00000000
   27 00000000         
   28 00000000 00000008 
                       SHIFT   EQU              0x08        ;Shift value to shift over bytes
   29 00000000 00000020 
                       CHECKTRANS
                               EQU              0x20        ;Check if ready to send
   30 00000000         
   31 00000000         ;-----------------------------------------------------
   32 00000000         ;      Define Program
   33 00000000                 AREA             LightingLibrary,CODE,READONLY



ARM Macro Assembler    Page 2 Lighting.s


   34 00000000                 ENTRY
   35 00000000                 EXPORT           LightingLibrary
   36 00000000         
   37 00000000         
   38 00000000         ;-----------------------------------------------------
   39 00000000         ;     Begin Library
   40 00000000         
   41 00000000         
   42 00000000         
   43 00000000         
   44 00000000                 EXPORT           setColor
   45 00000000         setColor                             ;Sends 1 LED frame to the SPI with specified color
   46 00000000         ;Input: Color in R0
   47 00000000         ;Output: Data sent through SPI
   48 00000000         ;Regmod: R0 (Data need not be preserved)
   49 00000000         
   50 00000000         ;Save registers
   51 00000000 B51E            PUSH             {R1-R4,LR}  ;LR, nested subroutines
   52 00000002         
   53 00000002         ;Load addresses
   54 00000002 491C            LDR              R1,=SPI_DL  ;Load data output register
   55 00000004 4A1C            LDR              R2,=SPI_BASE ;Load the base, which is the status register
   56 00000006         ;Color transmission
   57 00000006         ;CPSID I    ;Critical code
   58 00000006         
   59 00000006 24FF            MOVS             R4,#0xFF    ;1st bit of LED frame
   60 00000008 7813            LDRB             R3,[R2,#0]  ;Must read before a write
   61 0000000A 700C            STRB             R4,[R1,#0]  ;Store new color
   62 0000000C F000 F829       BL               checkTrans  ;Wait until ready to transmiut
   63 00000010         
   64 00000010         
   65 00000010         
   66 00000010         ;RGB value is reversed. Get the impl working, then fix with proper masking
   67 00000010         
   68 00000010         
   69 00000010         ;Transmit B
   70 00000010 7813            LDRB             R3,[R2,#0]  ;Must read before a write
   71 00000012 7008            STRB             R0,[R1,#0]  ;Store new color
   72 00000014 0A00            LSRS             R0,R0,#SHIFT ;Shift right 8 bits to get next portion of color code
   73 00000016 F000 F824       BL               checkTrans  ;Wait until ready to transmit
   74 0000001A         
   75 0000001A         ;Transmit G
   76 0000001A 7813            LDRB             R3,[R2,#0]  ;Must read before a write



ARM Macro Assembler    Page 3 Lighting.s


   77 0000001C 7008            STRB             R0,[R1,#0]  ;Store new color
   78 0000001E 0A00            LSRS             R0,R0,#SHIFT ;Shift right 8 bits to get next portion of color code
   79 00000020 F000 F81F       BL               checkTrans  ;Wait until ready to transmit
   80 00000024         
   81 00000024         ;Transmit R
   82 00000024 7813            LDRB             R3,[R2,#0]  ;Must read before a write
   83 00000026 7008            STRB             R0,[R1,#0]  ;Store new color
   84 00000028         
   85 00000028         ;CPSIE I    ;End of Critical code
   86 00000028         
   87 00000028         ;Restore and return
   88 00000028 BD1E            POP              {R1-R4,PC}
   89 0000002A         
   90 0000002A         
   91 0000002A         
   92 0000002A         
   93 0000002A         
   94 0000002A         
   95 0000002A                 EXPORT           startFrame
   96 0000002A         startFrame
   97 0000002A         ;Sends a start frame to the SPI
   98 0000002A         ;Input: None
   99 0000002A         ;Output: Start Frame to SPI
  100 0000002A         ;Regmod None
  101 0000002A         
  102 0000002A         ;Preserve registers
  103 0000002A B51F            PUSH             {R0-R4,LR}
  104 0000002C         
  105 0000002C         ;Move 0 to R0 as data and R1 as counter
  106 0000002C 2000            MOVS             R0,#0
  107 0000002E 2100            MOVS             R1,#0
  108 00000030         
  109 00000030         ;Load DL and BASE for SPI in R2 and R3
  110 00000030 4A10            LDR              R2,=SPI_DL
  111 00000032 4B11            LDR              R3,=SPI_BASE
  112 00000034         
  113 00000034         ;Loop
  114 00000034         startLoop
  115 00000034 2904            CMP              R1,#4       ;Check if Counter has reached 4
  116 00000036 D005            BEQ              Endit       ;If Counter ==4, End
  117 00000038 F000 F813       BL               checkTrans  ;Check if ready for transmit
  118 0000003C 781C            LDRB             R4,[R3,#0]  ;Load Status register values (to write)
  119 0000003E 7010            STRB             R0,[R2,#0]  ;Store bits at DL



ARM Macro Assembler    Page 4 Lighting.s


  120 00000040 3101            ADDS             R1,#1       ;Increment counter
  121 00000042 E7F7            B                startLoop   ;Loop
  122 00000044         
  123 00000044         ;Restpre and return
  124 00000044 BD1F    Endit   POP              {R0-R4,PC}
  125 00000046         
  126 00000046         
  127 00000046         
  128 00000046         
  129 00000046         
  130 00000046         
  131 00000046                 EXPORT           endFrame
  132 00000046         endFrame
  133 00000046         ;Sends an end frame through the SPI interface
  134 00000046         ;Input: None
  135 00000046         ;Output: End Frame through SPI
  136 00000046         ;Regmod: None
  137 00000046         
  138 00000046         ;Preserve registers
  139 00000046 B51F            PUSH             {R0-R4,LR}
  140 00000048         
  141 00000048         ;Move FF to R0 and instantiate counter in R1
  142 00000048 20FF            MOVS             R0,#0xFF
  143 0000004A 2100            MOVS             R1,#0
  144 0000004C         
  145 0000004C         ;Load the DL and Base SPI addresses
  146 0000004C 4A09            LDR              R2,=SPI_DL
  147 0000004E 4B0A            LDR              R3,=SPI_BASE
  148 00000050         
  149 00000050         ;Transfer loop
  150 00000050 2904    endloop CMP              R1,#4       ;Check if Counter == 4
  151 00000052 D005            BEQ              Endite      ;If true, end loop
  152 00000054 F000 F805       BL               checkTrans  ;Check if ready to transfer
  153 00000058 781C            LDRB             R4,[R3,#0]  ;Load status register (to write)
  154 0000005A 7010            STRB             R0,[R2,#0]  ;Send data out SPI DL
  155 0000005C 3101            ADDS             R1,#1       ;Increment counter
  156 0000005E E7F7            B                endloop     ;Loop
  157 00000060         
  158 00000060         ;Restore and return
  159 00000060 BD1F    Endite  POP              {R0-R4,PC}
  160 00000062         
  161 00000062         
  162 00000062         



ARM Macro Assembler    Page 5 Lighting.s


  163 00000062         
  164 00000062         
  165 00000062         checkTrans
  166 00000062         ;Subroutine checks if the SPI interface is ready
  167 00000062         ;to transmit, and loops until ready
  168 00000062         ;Input: None
  169 00000062         ;Output: None
  170 00000062         ;Regmod: None
  171 00000062         
  172 00000062         ;initializations
  173 00000062         ;Save registers
  174 00000062 B507            PUSH             {R0-R2,LR}
  175 00000064         
  176 00000064 4804            LDR              R0,=SPI_BASE ;Load base
  177 00000066 2120            MOVS             R1,#CHECKTRANS ;Load mask to check if transmit ready bit is set
  178 00000068         
  179 00000068         ;Loop until ready to transmit
  180 00000068         transLoop
  181 00000068 7802            LDRB             R2,[R0,#0]  ;Read the status register
  182 0000006A 400A            ANDS             R2,R2,R1    ;Mask status register with Transmit bit mask 
  183 0000006C 428A            CMP              R2,R1       ;Check to see if only transmit bit is set  
  184 0000006E D1FB            BNE              transLoop   ;If not, loop until set
  185 00000070         
  186 00000070         ;Restore and Return
  187 00000070 BD07            POP              {R0-R2,PC}
  188 00000072         
  189 00000072 00 00           ALIGN
  190 00000074         ;-----------------------------------------------------
  191 00000074                 END
              40076006 
              40076000 
Command Line: --debug --xref --length=50 --width=120 --diag_suppress=9931 --cpu=Cortex-M0+ --apcs=interwork --depend=.\o
bjects\lighting.d -o.\objects\lighting.o -I"C:\Users\John\Documents\Personal Projects\MotoController\MotoController\RTE\
_Target_1" -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\Kinetis_KLxx_DFP\1.12.0\Device
\Include --predefine="__EVAL SETA 1" --predefine="__UVISION_VERSION SETA 522" --predefine="_RTE_ SETA 1" --predefine="MK
L46Z256xxx4 SETA 1" --list=.\listings\lighting.lst Lighting.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Endit 00000044

Symbol: Endit
   Definitions
      At line 124 in file Lighting.s
   Uses
      At line 116 in file Lighting.s
Comment: Endit used once
Endite 00000060

Symbol: Endite
   Definitions
      At line 159 in file Lighting.s
   Uses
      At line 151 in file Lighting.s
Comment: Endite used once
LightingLibrary 00000000

Symbol: LightingLibrary
   Definitions
      At line 33 in file Lighting.s
   Uses
      At line 35 in file Lighting.s
Comment: LightingLibrary used once
checkTrans 00000062

Symbol: checkTrans
   Definitions
      At line 165 in file Lighting.s
   Uses
      At line 62 in file Lighting.s
      At line 73 in file Lighting.s
      At line 79 in file Lighting.s
      At line 117 in file Lighting.s
      At line 152 in file Lighting.s

endFrame 00000046

Symbol: endFrame
   Definitions
      At line 132 in file Lighting.s
   Uses
      At line 131 in file Lighting.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Comment: endFrame used once
endloop 00000050

Symbol: endloop
   Definitions
      At line 150 in file Lighting.s
   Uses
      At line 156 in file Lighting.s
Comment: endloop used once
setColor 00000000

Symbol: setColor
   Definitions
      At line 45 in file Lighting.s
   Uses
      At line 44 in file Lighting.s
Comment: setColor used once
startFrame 0000002A

Symbol: startFrame
   Definitions
      At line 96 in file Lighting.s
   Uses
      At line 95 in file Lighting.s
Comment: startFrame used once
startLoop 00000034

Symbol: startLoop
   Definitions
      At line 114 in file Lighting.s
   Uses
      At line 121 in file Lighting.s
Comment: startLoop used once
transLoop 00000068

Symbol: transLoop
   Definitions
      At line 180 in file Lighting.s
   Uses
      At line 184 in file Lighting.s
Comment: transLoop used once
10 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

AMBER 00FFC200

Symbol: AMBER
   Definitions
      At line 25 in file Lighting.s
   Uses
      None
Comment: AMBER unused
CHECKTRANS 00000020

Symbol: CHECKTRANS
   Definitions
      At line 29 in file Lighting.s
   Uses
      At line 177 in file Lighting.s
Comment: CHECKTRANS used once
NOCOLOR 00000000

Symbol: NOCOLOR
   Definitions
      At line 26 in file Lighting.s
   Uses
      None
Comment: NOCOLOR unused
SHIFT 00000008

Symbol: SHIFT
   Definitions
      At line 28 in file Lighting.s
   Uses
      At line 72 in file Lighting.s
      At line 78 in file Lighting.s

SPI_BASE 40076000

Symbol: SPI_BASE
   Definitions
      At line 22 in file Lighting.s
   Uses
      At line 55 in file Lighting.s
      At line 111 in file Lighting.s
      At line 147 in file Lighting.s
      At line 176 in file Lighting.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols


SPI_DH 40076007

Symbol: SPI_DH
   Definitions
      At line 21 in file Lighting.s
   Uses
      None
Comment: SPI_DH unused
SPI_DL 40076006

Symbol: SPI_DL
   Definitions
      At line 20 in file Lighting.s
   Uses
      At line 54 in file Lighting.s
      At line 110 in file Lighting.s
      At line 146 in file Lighting.s

WHITE 00FFFFFF

Symbol: WHITE
   Definitions
      At line 24 in file Lighting.s
   Uses
      None
Comment: WHITE unused
8 symbols
355 symbols in table
